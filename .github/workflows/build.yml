name: Build and run Tests

on: 
  workflow_call:
    inputs: 
      prNumber:
        description: Pull request number for commenting
        type: number
        required: false
      isPreRelease:
        default: true
        type: boolean  
      enableCache:
        default: true
        type: boolean  
      ballerina:
        description: Update Ballerina extension version
        type: boolean
        required: false
        default: false
      wso2-platform:
        description: Update WSO2 Platform extension version
        type: boolean
        required: false
        default: false   
      choreo:
        description: Update Choreo extension version
        type: boolean
        required: false
        default: false   
      apk:
        description: Update APK extension version
        type: boolean
        required: false
        default: false  
      bi:
        description: Update BI extension version
        type: boolean
        required: false
        default: false           
      mi:
        description: Update MI extension version
        type: boolean
        required: false
        default: false                     
      version:
        default: 'N/A'
        type: string
        required: false
      isReleaseBuild:  
        type: boolean
        default: false
      runTests:
        type: boolean
        required: false
        default: false
      runE2ETests:
        type: boolean
        required: false
        default: false  

env:
  ballerina_version: 2201.7.2
  ballerina_zip_url: https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.7.2/ballerina-2201.7.2-swan-lake.zip
  ballerina_deb_url: https://dist.ballerina.io/downloads/2201.7.2/ballerina-2201.7.2-swan-lake-linux-x64.deb

jobs:
  Build_Stage:
    name: Build repo
    timeout-minutes: 45
    runs-on: ubuntu-latest
    outputs:
      runBalExtTests: ${{ steps.testMatrix.outputs.runBalExtTests }}
      runChoreoExtTests: ${{ steps.testMatrix.outputs.runChoreoExtTests }}
      runMIExtTests: ${{ steps.testMatrix.outputs.runMIExtTests }}
      runAPKExtTests: ${{ steps.testMatrix.outputs.runAPKExtTests }}
      runBIExtTests: ${{ steps.testMatrix.outputs.runBIExtTests }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Analyze diff
        shell: bash
        id: diff
        run: |
          testArray=""
          echo "hasBalDiff=false" >> $GITHUB_OUTPUT
          echo "hasChoreoDiff=false" >> $GITHUB_OUTPUT
          echo "hasMIDiff=false" >> $GITHUB_OUTPUT

          # Get list of all changed files in the PR
          if [[ ${{ inputs.isReleaseBuild }} = 'true' ]]; then
            git fetch origin main
            CHANGED_DIRS=$(git diff --name-only HEAD..refs/remotes/origin/main | grep -E "^/*" || true)
          else
            CHANGED_DIRS=$(git diff --name-only HEAD^..HEAD | grep -E "^/*" || true)
          fi

          echo $CHANGED_DIRS[@]

          # Ballerina ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/ballerina" ]]; then
            echo "hasBalDiff=true" >> $GITHUB_OUTPUT
          fi 

          # Choreo ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/choreo" ]]; then
            echo "hasChoreoDiff=true" >> $GITHUB_OUTPUT
          fi

          # MI ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/mi" ]]; then
              echo "hasMIDiff=true" >> $GITHUB_OUTPUT
          fi
          
          # APK ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/apk" ]]; then
            echo "hasAPKDiff=true" >> $GITHUB_OUTPUT
          fi

          # BI ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/bi" ]]; then
            echo "hasBIDiff=true" >> $GITHUB_OUTPUT
          fi

          # Common
          if  [[ "${CHANGED_DIRS[@]}" =~ "workspaces/common-libs" || "${CHANGED_DIRS[@]}" =~ "common" || "${CHANGED_DIRS[@]}" =~ ".github" || "${CHANGED_DIRS[@]}" =~ "^/*.json" ]]; then
            echo "Have changes in common libs"
            echo "hasBalDiff=true" >> $GITHUB_OUTPUT
            echo "hasChoreoDiff=true" >> $GITHUB_OUTPUT
            echo "hasAPKDiff=true" >> $GITHUB_OUTPUT
            echo "hasBIDiff=true" >> $GITHUB_OUTPUT
            echo "hasMIDiff=true" >> $GITHUB_OUTPUT
          fi

      - name: Set test matrix
        shell: bash
        id: testMatrix
        run: |
          echo "Ballerina Tests: ${{ steps.diff.outputs.hasBalDiff }}"
          echo "runBalExtTests=${{ steps.diff.outputs.hasBalDiff }}" >> $GITHUB_OUTPUT
          echo "Choreo Tests: ${{ steps.diff.outputs.hasChoreoDiff }}"
          echo "runChoreoExtTests=${{ steps.diff.outputs.hasChoreoDiff }}" >> $GITHUB_OUTPUT
          echo "runAPKExtTests=${{ steps.diff.outputs.hasAPKDiff }}" >> $GITHUB_OUTPUT
          echo "runBIExtTests=${{ steps.diff.outputs.hasBIDiff }}" >> $GITHUB_OUTPUT
          echo "MI Tests: ${{ steps.diff.outputs.hasMIDiff }}"
          echo "runMIExtTests=${{ steps.diff.outputs.hasMIDiff }}" >> $GITHUB_OUTPUT

      - name: Build
        uses: ./.github/actions/build
        with:
          isPreRelease: ${{ inputs.isPreRelease }}
          enableCache: ${{ inputs.enableCache }}
          ballerina: ${{ inputs.ballerina }}
          choreo: ${{ inputs.choreo }}
          wso2-platform: ${{ inputs.wso2-platform }}
          apk: ${{ inputs.apk }}
          bi: ${{ inputs.bi }}
          mi: ${{ inputs.mi }}
          version: ${{ inputs.version }}
          token: ${{ secrets.CHOREO_BOT_TOKEN }}
          BALLERINA_AUTH_ORG: ${{ secrets.BALLERINA_AUTH_ORG }}
          BALLERINA_AUTH_CLIENT_ID: ${{ secrets.BALLERINA_AUTH_CLIENT_ID }}
          MI_AUTH_ORG: ${{ secrets.MI_AUTH_ORG }}
          MI_AUTH_CLIENT_ID: ${{ secrets.MI_AUTH_CLIENT_ID }}
          PLATFORM_DEFAULT_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_DEFAULT_GHAPP_CLIENT_ID }}
          PLATFORM_DEFAULT_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_DEFAULT_DEVANT_ASGARDEO_CLIENT_ID }}
          PLATFORM_STAGE_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_STAGE_GHAPP_CLIENT_ID }}
          PLATFORM_STAGE_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_STAGE_DEVANT_ASGARDEO_CLIENT_ID }}
          PLATFORM_DEV_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_DEV_GHAPP_CLIENT_ID }}
          PLATFORM_DEV_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_DEV_DEVANT_ASGARDEO_CLIENT_ID }}

  Security_Scan:
    name: Security vulnerability scan
    needs: Build_Stage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.11.0
          node: 22.x
          rush-install: true

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Verify Trivy installation
        run: |
          trivy version
          echo "Trivy installed successfully"

      - name: Show scan configuration
        run: |
          echo "üîß Security Scan Configuration:"
          echo "  - Scanning: Production dependencies"
          echo "  - Severity levels: CRITICAL, HIGH, MEDIUM, LOW"
          echo "  - Skipping directories: common/temp"
          echo "  - Timeout: 10 minutes"
          echo "  - Exit on vulnerabilities: YES"

      - name: Debug dependency state
        run: |
          echo "üîç Debugging dependency state for vulnerability scanning..."
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Checking for axios in root package.json:"
          cat package.json | grep -A5 -B5 axios || echo "No axios found in root package.json"
          echo ""
          echo "Checking for axios in ui-toolkit package.json:"
          cat workspaces/common-libs/ui-toolkit/package.json | grep -A5 -B5 axios || echo "No axios found in ui-toolkit package.json"
          echo ""
          echo "Checking pnpm-lock.yaml for axios entries:"
          grep -c "axios" pnpm-lock.yaml || echo "No axios entries found in pnpm-lock.yaml"
          echo ""
          echo "Checking if axios 0.21.0 is in pnpm-lock.yaml:"
          grep "axios@0.21.0" pnpm-lock.yaml || echo "No axios@0.21.0 found in pnpm-lock.yaml"
          echo ""
          echo "Lock file structure summary:"
          echo "- pnpm-lock.yaml exists: $(test -f pnpm-lock.yaml && echo 'YES' || echo 'NO')"
          echo "- common/config/rush/pnpm-lock.yaml exists: $(test -f common/config/rush/pnpm-lock.yaml && echo 'YES' || echo 'NO')"

      - name: Run Trivy vulnerability scanner
        run: |
          echo "üîç Running Trivy vulnerability scanner (table format)..."
          
          # Run Trivy with verbose output for debugging
          trivy fs . \
            --timeout 10m \
            --skip-dirs common/temp \
            --severity CRITICAL,HIGH,MEDIUM,LOW \
            --format table \
            --output trivy-table-results.txt \
            --exit-code 0 \
            --debug
          
          echo "üìä Table output complete."
          echo ""
          echo "üìã Trivy scan results preview:"
          head -50 trivy-table-results.txt || echo "No output file generated"
          echo ""
          
          # Check if vulnerabilities were found by examining the table output
          if [ -f "trivy-table-results.txt" ]; then
            # Count vulnerability lines (exclude headers and empty lines)
            VULN_COUNT=$(grep -c "CVE\|GHSA" trivy-table-results.txt 2>/dev/null || echo "0")
            echo "üî¢ CVE/GHSA count found: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ùå Trivy scan found $VULN_COUNT vulnerabilities!"
              echo "Check the table output for details."
              echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
              echo "VULN_COUNT=$VULN_COUNT" >> $GITHUB_ENV
            else
              echo "‚úÖ No vulnerabilities found!"
              echo "VULNERABILITIES_FOUND=false" >> $GITHUB_ENV
              echo "VULN_COUNT=0" >> $GITHUB_ENV
            fi
          else
            echo "‚ö†Ô∏è Table output file not generated!"
            echo "VULNERABILITIES_FOUND=false" >> $GITHUB_ENV
            echo "VULN_COUNT=0" >> $GITHUB_ENV
          fi

      - name: Create PR comment with vulnerability report
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the table output
            let tableOutput = '';
            try {
              tableOutput = fs.readFileSync('trivy-table-results.txt', 'utf8');
            } catch (error) {
              tableOutput = 'Unable to read vulnerability details.';
            }
            
            // Count vulnerabilities by severity
            const vulnCount = process.env.VULN_COUNT || 'unknown';
            
            const comment = `## üö® Security Vulnerabilities Detected
            
            **‚ùå Build Failed**: ${vulnCount} security vulnerabilities found in dependencies.

            ### üìä Vulnerability Summary
            \`\`\`
            ${tableOutput}
            \`\`\`

            ### üîß Next Steps
            1. **Review vulnerabilities** in the table above
            2. **Update vulnerable packages** to the fixed versions shown
            3. **Re-run the build** after fixing the issues

            ### üìã Additional Information
            - **Scan Type**: Production dependencies only
            - **Severity Levels**: CRITICAL, HIGH, MEDIUM, LOW
            - **Workflow**: Security_Scan job in build pipeline

            > üí° **Tip**: Focus on CRITICAL and HIGH severity vulnerabilities first for maximum security impact.`;

            // Get PR number from various possible sources
            let prNumber = null;
            
            console.log('üîç Debugging context information:');
            console.log('Event name:', context.eventName);
            console.log('Ref:', context.ref);
            console.log('SHA:', context.sha);
            console.log('Actor:', context.actor);
            console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
            console.log('Payload keys:', Object.keys(context.payload));
            console.log('Full payload structure:');
            console.log(JSON.stringify(context.payload, null, 2));
            
            // Method 0: Check if PR number is provided as input
            const inputPrNumber = '${{ inputs.prNumber }}';
            if (inputPrNumber && inputPrNumber !== '' && inputPrNumber !== 'null') {
              prNumber = parseInt(inputPrNumber);
              console.log('‚úÖ Found PR via input parameter:', prNumber);
            }
            
            // Method 1: Direct PR context (pull_request events)
            if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
              console.log('‚úÖ Found PR via payload.pull_request:', prNumber);
            }
            
            // Method 2: Check if triggered by PR (workflow_run events)
            if (!prNumber && context.payload.workflow_run && context.payload.workflow_run.pull_requests && context.payload.workflow_run.pull_requests.length > 0) {
              prNumber = context.payload.workflow_run.pull_requests[0].number;
              console.log('‚úÖ Found PR via workflow_run:', prNumber);
            }
            
            // Method 3: Parse from ref if it's a PR branch
            if (!prNumber && context.ref && context.ref.includes('refs/pull/')) {
              const match = context.ref.match(/refs\/pull\/(\d+)\//);
              if (match) {
                prNumber = parseInt(match[1]);
                console.log('‚úÖ Found PR via ref parsing:', prNumber);
              }
            }
            
            // Method 4: Search for PR using commit SHA (most reliable for workflow_call)
            if (!prNumber) {
              console.log('üîç Searching for PR using commit SHA...');
              try {
                const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: context.sha
                });
                
                console.log('Found PRs for commit:', prs.length);
                if (prs && prs.length > 0) {
                  prNumber = prs[0].number;
                  console.log('‚úÖ Found PR via commit SHA search:', prNumber);
                  console.log('PR details:', {
                    number: prs[0].number,
                    title: prs[0].title,
                    state: prs[0].state,
                    head: prs[0].head.ref,
                    base: prs[0].base.ref
                  });
                }
              } catch (error) {
                console.log('‚ùå Failed to search for PR via commit SHA:', error.message);
                console.log('Error status:', error.status);
                console.log('Error response:', error.response?.data);
              }
            }
            
            // Method 5: Try to find open PRs for this branch
            if (!prNumber && context.ref) {
              const branchName = context.ref.replace('refs/heads/', '');
              console.log('üîç Searching for PRs for branch:', branchName);
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branchName}`,
                  state: 'open'
                });
                
                console.log('Found PRs for branch:', prs.length);
                if (prs && prs.length > 0) {
                  prNumber = prs[0].number;
                  console.log('‚úÖ Found PR via branch search:', prNumber);
                }
              } catch (error) {
                console.log('‚ùå Failed to search for PR via branch:', error.message);
              }
            }
            
            // Method 6: Fallback - try common PR numbers if this is clearly a PR context
            if (!prNumber && (context.ref.includes('pull') || context.actor !== 'dependabot[bot]')) {
              console.log('üîç Attempting fallback PR detection...');
              // Try to extract from git refs or environment
              const gitRef = process.env.GITHUB_REF || context.ref || '';
              console.log('Git ref:', gitRef);
              const headRef = process.env.GITHUB_HEAD_REF || '';
              console.log('Head ref:', headRef);
              
              // Check if we can find recent PRs that might match our commit
              try {
                const { data: recentPrs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  sort: 'updated',
                  per_page: 10
                });
                
                console.log(`Found ${recentPrs.length} recent open PRs`);
                for (const pr of recentPrs) {
                  console.log(`PR #${pr.number}: ${pr.title} (head: ${pr.head.sha.substring(0, 8)})`);
                  if (pr.head.sha === context.sha) {
                    prNumber = pr.number;
                    console.log('‚úÖ Found PR via SHA match in recent PRs:', prNumber);
                    break;
                  }
                }
              } catch (error) {
                console.log('‚ùå Failed to search recent PRs:', error.message);
              }
            }
            
            // Method 7: Try to extract from run context if available
            if (!prNumber) {
              console.log('üîç Checking for PR number in run context...');
              const runUrl = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID;
              console.log('Run URL:', runUrl);
              
              // Check if there's a pattern in the workflow context that might indicate PR
              if (context.payload.workflow_run && context.payload.workflow_run.html_url) {
                const urlMatch = context.payload.workflow_run.html_url.match(/pr=(\d+)/);
                if (urlMatch) {
                  prNumber = parseInt(urlMatch[1]);
                  console.log('‚úÖ Found PR via workflow run URL:', prNumber);
                }
              }
            }
            
            // Method 8: Extract from GitHub Actions environment (GITHUB_REF for pull request events)
            if (!prNumber) {
              console.log('üîç Checking GITHUB_REF for PR information...');
              const githubRef = process.env.GITHUB_REF || '';
              console.log('GITHUB_REF:', githubRef);
              
              // Check if this is a merge ref (refs/pull/150/merge)
              const mergeRefMatch = githubRef.match(/refs\/pull\/(\d+)\/merge/);
              if (mergeRefMatch) {
                prNumber = parseInt(mergeRefMatch[1]);
                console.log('‚úÖ Found PR via GITHUB_REF merge ref:', prNumber);
              }
            }
            
            // Method 9: Try to get PR number from the event payload more deeply
            if (!prNumber) {
              console.log('üîç Deep inspection of event payload...');
              
              // Check if this is a pull_request_target event or similar
              if (context.payload.number) {
                prNumber = context.payload.number;
                console.log('‚úÖ Found PR via payload.number:', prNumber);
              }
              
              // Check for pull request in nested structures
              if (!prNumber && context.payload.pull_request && context.payload.pull_request.number) {
                prNumber = context.payload.pull_request.number;
                console.log('‚úÖ Found PR via nested payload.pull_request.number:', prNumber);
              }
            }
            
            if (prNumber) {
              try {
                console.log(`üìù Attempting to post vulnerability report to PR #${prNumber}`);
                
                // First, verify the PR exists and is accessible
                const { data: prDetails } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                console.log(`‚úÖ PR #${prNumber} verified: "${prDetails.title}" (state: ${prDetails.state})`);
                
                // Now post the comment
                const result = await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                
                console.log('‚úÖ PR comment posted successfully!');
                console.log('Comment ID:', result.data.id);
                console.log('Comment URL:', result.data.html_url);
                
              } catch (error) {
                console.log('‚ùå Failed to post PR comment:', error.message);
                console.log('Error status:', error.status);
                console.log('Error response:', JSON.stringify(error.response?.data, null, 2));
                
                if (error.status === 404) {
                  console.log('üîç PR not found - checking if PR exists...');
                  try {
                    const { data: prCheck } = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber
                    });
                    console.log('PR exists but comment failed:', prCheck.title);
                  } catch (prError) {
                    console.log('PR does not exist:', prError.message);
                  }
                }
                
                console.log('Vulnerability report will be logged in job output instead');
              }
            } else {
              console.log('üìã No PR found - vulnerability report available in job output');
              console.log('All detection methods exhausted.');
              console.log('Environment details:');
              console.log('- GITHUB_REF:', process.env.GITHUB_REF);
              console.log('- GITHUB_HEAD_REF:', process.env.GITHUB_HEAD_REF);
              console.log('- GITHUB_BASE_REF:', process.env.GITHUB_BASE_REF);
              console.log('- GITHUB_EVENT_NAME:', process.env.GITHUB_EVENT_NAME);
            }
            
            // Always log the vulnerability details to job output
            console.log('\n' + '='.repeat(80));
            console.log('üö® SECURITY VULNERABILITY REPORT');
            console.log('='.repeat(80));
            console.log(comment);
            console.log('='.repeat(80) + '\n');

      - name: Fail build if vulnerabilities found
        if: env.VULNERABILITIES_FOUND == 'true'
        run: |
          echo "‚ùå Build failed due to security vulnerabilities!"
          echo "Please review the table output above for vulnerability details."
          echo "Fix the vulnerabilities before proceeding."
          exit 1

  ExtTest_Ballerina:
    name: Run Ballerina extension tests
    needs: Build_Stage
    if: false
    # if: ${{ inputs.runTests || !inputs.isPreRelease || needs.Build_Stage.outputs.runBalExtTests == 'true' || github.base_ref == 'release-ballerina' }}
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Set up Ballerina
        run: |
          cd workspaces/ballerina/ballerina-extension
          mkdir extractedDistribution
          wget ${{ env.ballerina_zip_url }}
          unzip -qq ./ballerina-${{ env.ballerina_version }}-swan-lake.zip -d ./extractedDistribution
          rm ballerina-${{ env.ballerina_version }}-swan-lake.zip
          balVersion=$(ls ./extractedDistribution)
          balHome=./extractedDistribution/$balVersion

          echo "$balHome/bin" >> $GITHUB_PATH

      - name: Run Test
        run: |
          cd workspaces/ballerina/ballerina-extension
          xvfb-run --auto-servernum pnpm run test
        env:
          balVersion: ${{ steps.set-version.outputs.balVersion }}
          balHome: ${{ steps.set-version.outputs.balHome }}

  UiTest_Ballerina:
    name: Run Ballerina e2e tests
    needs: Build_Stage
    if: false
    # if: ${{ inputs.runE2ETests || github.base_ref == 'release-ballerina' }}
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - uses: ballerina-platform/setup-ballerina@v1
        name: Install Ballerina
        with:
          version: ${{ env.ballerina_version }}

      - name: update packages
        run: sudo apt-get update

      - name: install packages
        run: |
          sudo apt-get install ffmpeg
          sudo apt-get install xvfb

      - name: Runs Tests
        run: |
          cd workspaces/ballerina/ballerina-extension
          sudo apt-get install xvfb
          pnpm run e2e-test-setup
          export DISPLAY=:98.0
          timeout 1800 sh e2e-test-runner.sh

      - name: Publish e2e test output
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/ballerina/ballerina-extension/test-resources/output.txt
          name: Ballerina-e2e-test-output-${{ github.run_attempt }}
        if: failure()

      - name: Publish e2e test recording
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/ballerina/ballerina-extension/test-resources/e2e-test-out.mp4
          name: Ballerina-e2e-test-recording-${{ github.run_attempt }}
          retention-days: 5
        if: failure()

      - name: Publish e2e test Screenshots
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/ballerina/ballerina-extension/test-resources/screenshots/
          name: Ballerina-e2e-test-screenshots-${{ github.run_attempt }}
          retention-days: 5
        if: failure()

  UiTest_Choreo:
    name: Run Choreo e2e tests
    # Disabling Choreo E2E tests until tests have been updated to V2 Flow
    if: false
    # if: ${{ !inputs.skipUiTests || github.base_ref == 'release-choreo' }}
    needs: Build_Stage
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - uses: ballerina-platform/setup-ballerina@v1
        name: Install Ballerina
        with:
          version: ${{ env.ballerina_version }}

      - name: update packages
        run: sudo apt-get update

      - name: install packages
        run: |
          sudo apt-get install ffmpeg
          sudo apt-get install xvfb
          sudo apt-get install -y gnome-keyring
          sudo apt-get install libsecret-1.0
          sudo apt install dbus-x11
          cd workspaces/choreo/choreo-extension && npx playwright install

      - name: Run tests
        run: |
          cd workspaces/choreo/choreo-extension 
          pnpm run e2e-test-setup
          export $(dbus-launch)
          export DISPLAY=:98.0
          git config --global user.email "choreo-test-user@wso2.com"
          git config --global user.name "choreo-user"
          timeout 900 sh e2e-test-runner.sh
        env:
          TEST_CHOREO_EXT_ENV: prod

      - name: Publish e2e test output
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/choreo/choreo-extension/test-resources/output.txt
          name: Choreo-e2e-test-output-${{ github.run_attempt }}
          retention-days: 5
        if: failure()

      - name: Publish e2e test recording
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/choreo/choreo-extension/test-resources/e2e-test-out.mp4
          name: Choreo-e2e-test-recording-${{ github.run_attempt }}
          retention-days: 5
        if: failure()

      - name: Publish e2e test Screenshots
        uses: actions/upload-artifact@v4
        with:
          path: workspaces/choreo/choreo-extension/test-resources/screenshots/
          name: Choreo-e2e-test-screenshots-${{ github.run_attempt }}
        if: failure()

  ExtTest_MI:
    name: Run MI diagram tests
    needs: Build_Stage
    if: ${{ inputs.runTests || !inputs.isPreRelease || needs.Build_Stage.outputs.runMIExtTests == 'true' || github.base_ref == 'release-mi' }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Run Test
        run: |
          cd workspaces/mi/mi-diagram
          xvfb-run --auto-servernum pnpm run test

  UITest_MI:
    name: Run MI UI tests
    needs: Build_Stage
    if: ${{ inputs.runE2ETests || github.base_ref == 'release-mi' }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [group1, group2, group3]
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Check for previous test results
        if: github.run_attempt > 1
        run: |
          PREVIOUS_ATTEMPT=$((${{ github.run_attempt }} - 1))
          echo "PREVIOUS_ATTEMPT=$PREVIOUS_ATTEMPT" >> $GITHUB_ENV
        
      - name: Download previous test results
        id: check-results
        if: github.run_attempt > 1
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: MI-e2e-test-results-${{ matrix.group }}-${{ env.PREVIOUS_ATTEMPT }}
          path: workspaces/mi/mi-extension/test-results

      - name: install packages
        run: |
          sudo apt-get update
          sudo apt-get install xvfb
          sudo apt-get install ffmpeg
          sudo apt-get install -y gnome-keyring
          sudo apt-get install libsecret-1.0
          sudo apt install dbus-x11
          cd workspaces/mi/mi-extension && npx playwright install
          
      - name: Run Tests (First Attempt)
        if: github.run_attempt == 1 || steps.check-results.outcome == 'failure'
        run: |
          export $(dbus-launch)
          export DISPLAY=:98.0
          cd workspaces/mi/mi-extension
          xvfb-run --server-num 98.0 -s "-ac -screen 0 1920x1080x24" bash -c "ffmpeg -f x11grab -r 30 -s 1920x1080 -i :98.0 -c:v libx264 -preset ultrafast -pix_fmt yuv420p -movflags +faststart -hide_banner -loglevel error record.mp4 & npx playwright test --grep ${{ matrix.group }}"

      - name: Run Failed Tests (Re-run)
        if: github.run_attempt > 1 && steps.check-results.outcome == 'success'
        run: |
          export $(dbus-launch)
          export DISPLAY=:98.0
          cd workspaces/mi/mi-extension
          xvfb-run --server-num 98.0 -s "-ac -screen 0 1920x1080x24" bash -c "ffmpeg -f x11grab -r 30 -s 1920x1080 -i :98.0 -c:v libx264 -preset ultrafast -pix_fmt yuv420p -movflags +faststart -hide_banner -loglevel error record.mp4 & npx playwright test --grep ${{ matrix.group }} --last-failed"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: MI-e2e-test-results-${{ matrix.group }}-${{ github.run_attempt }}
          path: workspaces/mi/mi-extension/test-results/**
          retention-days: 5
          include-hidden-files: true
          
      - name: Upload recordings
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: MI-e2e-test-recording-${{ matrix.group }}-${{ github.run_attempt }}
          path: | 
            workspaces/mi/mi-extension/src/test/test-resources/videos/**
            workspaces/mi/mi-extension/src/test/test-resources/screenshots/**
            workspaces/mi/mi-extension/record.mp4
          retention-days: 5
